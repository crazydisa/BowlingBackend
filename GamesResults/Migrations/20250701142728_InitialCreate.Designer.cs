// <auto-generated />
using System;
using GamesResults;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GamesResults.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250701142728_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ActionsRoles", b =>
                {
                    b.Property<int>("ActionId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("ActionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ActionsRoles", "dbo");
                });

            modelBuilder.Entity("GamesResults.Models.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsChange")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLogDetails")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("ObjectTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ObjectTypeId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.HasIndex("ObjectTypeId", "Name");

                    b.ToTable("Actions", "dbo");
                });

            modelBuilder.Entity("GamesResults.Models.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ActionId")
                        .HasColumnType("integer");

                    b.Property<int>("LogLevel")
                        .HasColumnType("integer");

                    b.Property<string>("LogText")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("ObjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("ObjectId");

                    b.HasIndex("UserId1");

                    b.ToTable("Logs", "dbo");
                });

            modelBuilder.Entity("GamesResults.Models.LogDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LogId")
                        .HasColumnType("uuid");

                    b.Property<string>("NewValue")
                        .HasColumnType("text");

                    b.Property<string>("OldValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LogId");

                    b.ToTable("LogDetails", "dbo");
                });

            modelBuilder.Entity("GamesResults.Models.Object", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("DeleterId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)");

                    b.Property<long?>("EditorId")
                        .HasColumnType("bigint");

                    b.Property<string>("IconName")
                        .HasColumnType("text");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<int?>("SortIndex")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("EditorId");

                    b.HasIndex("ParentId");

                    b.HasIndex("TypeId");

                    b.ToTable("Objects", "dbo");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("GamesResults.Models.ObjectProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DataFormat")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DictionaryTypeName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayExpr")
                        .HasColumnType("text");

                    b.Property<string>("GroupTitle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsArray")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoolean")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGuid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHiddenByDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHiddenInLogDetail")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIdentifier")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInclude")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMultiline")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNotAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNullable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNumeric")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsObject")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsString")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("NameSpace")
                        .HasColumnType("text");

                    b.Property<int?>("ObjectTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("RelatedField")
                        .HasColumnType("text");

                    b.Property<string>("RelatedType")
                        .HasColumnType("text");

                    b.Property<int?>("SortIndex")
                        .HasColumnType("integer");

                    b.Property<string>("SubGroupTitle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("TypeName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ObjectTypeId", "Name")
                        .IsUnique();

                    b.HasIndex("ObjectTypeId", "Title", "GroupTitle", "SubGroupTitle")
                        .IsUnique();

                    b.ToTable("ObjectProperties", "dbo");
                });

            modelBuilder.Entity("GamesResults.Models.ObjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayExpr")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("NameSpace")
                        .HasColumnType("text");

                    b.Property<long?>("RootContainerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RootContainerId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("ObjectTypes", "dbo");
                });

            modelBuilder.Entity("GamesResults.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDepartment")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPosition")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Roles", "dbo");
                });

            modelBuilder.Entity("GamesResults.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birthday");

                    b.Property<int?>("CanBeGip")
                        .HasColumnType("integer")
                        .HasColumnName("can_be_gip");

                    b.Property<string>("DataSource")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("data_source")
                        .HasDefaultValueSql("'B'::character varying");

                    b.Property<DateTime>("DtChange")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dt_change")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DtFinish")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dt_finish");

                    b.Property<DateTime?>("DtStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dt_start");

                    b.Property<string>("EMail")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("e_mail");

                    b.Property<string>("EmpNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("emp_number");

                    b.Property<string>("ExternalKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("external_key");

                    b.Property<int?>("Greid")
                        .HasColumnType("integer")
                        .HasColumnName("greid");

                    b.Property<string>("Host")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("host");

                    b.Property<long?>("IdExternal")
                        .HasColumnType("bigint")
                        .HasColumnName("id_external");

                    b.Property<long?>("IdFuncOtdel")
                        .HasColumnType("bigint")
                        .HasColumnName("id_func_otdel");

                    b.Property<long?>("IdFuncSubdivision")
                        .HasColumnType("bigint")
                        .HasColumnName("id_func_subdivision");

                    b.Property<int?>("IdInt")
                        .HasColumnType("integer")
                        .HasColumnName("id_int");

                    b.Property<long?>("IdOrganization")
                        .HasColumnType("bigint")
                        .HasColumnName("id_organization");

                    b.Property<long?>("IdOtdel")
                        .HasColumnType("bigint")
                        .HasColumnName("id_otdel");

                    b.Property<long?>("IdPosition")
                        .HasColumnType("bigint")
                        .HasColumnName("id_position");

                    b.Property<long?>("IdRoom")
                        .HasColumnType("bigint")
                        .HasColumnName("id_room");

                    b.Property<long?>("IdSubdivision")
                        .HasColumnType("bigint")
                        .HasColumnName("id_subdivision");

                    b.Property<int>("IdType")
                        .HasColumnType("integer")
                        .HasColumnName("id_type");

                    b.Property<string>("Inn")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("inn");

                    b.Property<string>("IpAdress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsChief")
                        .HasColumnType("boolean")
                        .HasColumnName("is_chief");

                    b.Property<string>("Login")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("login");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("patronymic");

                    b.Property<string>("Phone")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("phone");

                    b.Property<string>("Placement")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("placement");

                    b.Property<long?>("PmObjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("pm_ObjectId");

                    b.Property<string>("Remark")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("remark");

                    b.Property<Guid>("SapsanId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShortName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("short_name");

                    b.Property<byte[]>("Sid")
                        .HasColumnType("bytea")
                        .HasColumnName("sid");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("status")
                        .HasDefaultValueSql("10");

                    b.Property<string>("Surname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("surname");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Users", "dbo");
                });

            modelBuilder.Entity("ObjectPropertiesEditRoles", b =>
                {
                    b.Property<int>("PropertyId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("PropertyId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ObjectPropertiesEditRoles", "dbo");
                });

            modelBuilder.Entity("UsersRoles", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersRoles", "dbo");
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.Event", b =>
                {
                    b.HasBaseType("GamesResults.Models.Object");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("date");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("OilId")
                        .HasColumnType("bigint");

                    b.HasIndex("OilId");

                    b.ToTable("Events", "dbo");
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.EventTeamMember", b =>
                {
                    b.HasBaseType("GamesResults.Models.Object");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasIndex("EventId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("EventTeamMembers", "dbo");
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.Participation", b =>
                {
                    b.HasBaseType("GamesResults.Models.Object");

                    b.Property<double?>("Average")
                        .HasColumnType("double precision");

                    b.Property<long>("BowlingId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Game1")
                        .HasColumnType("integer");

                    b.Property<int?>("Game2")
                        .HasColumnType("integer");

                    b.Property<int?>("Game3")
                        .HasColumnType("integer");

                    b.Property<int?>("Game4")
                        .HasColumnType("integer");

                    b.Property<int?>("Game5")
                        .HasColumnType("integer");

                    b.Property<int?>("Game6")
                        .HasColumnType("integer");

                    b.Property<long?>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Result")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("Summ")
                        .HasColumnType("integer");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.HasIndex("BowlingId");

                    b.HasIndex("EventId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("Participations", "dbo");
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.Team", b =>
                {
                    b.HasBaseType("GamesResults.Models.Object");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("SportType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.ToTable("Teams", "dbo");
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.TeamMember", b =>
                {
                    b.HasBaseType("GamesResults.Models.Object");

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RankId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasIndex("CityId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("RankId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamMembers", "dbo");
                });

            modelBuilder.Entity("GamesResults.Models.Container", b =>
                {
                    b.HasBaseType("GamesResults.Models.Object");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Containers", "dbo");
                });

            modelBuilder.Entity("GamesResults.Models.DictionaryItem", b =>
                {
                    b.HasBaseType("GamesResults.Models.Object");

                    b.Property<long?>("DictionaryTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsNotUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("name");

                    b.HasIndex("DictionaryTypeId");

                    b.ToTable("DictionaryItems", "dbo");
                });

            modelBuilder.Entity("GamesResults.Models.Component", b =>
                {
                    b.HasBaseType("GamesResults.Models.Container");

                    b.Property<int?>("LoadActionId")
                        .HasColumnType("integer");

                    b.HasIndex("LoadActionId");

                    b.ToTable("Components", "dbo");
                });

            modelBuilder.Entity("GamesResults.Models.DictionaryType", b =>
                {
                    b.HasBaseType("GamesResults.Models.Container");

                    b.ToTable("DictionaryTypes", "dbo");
                });

            modelBuilder.Entity("GamesResults.Models.System", b =>
                {
                    b.HasBaseType("GamesResults.Models.Container");

                    b.Property<bool?>("IsBlocked")
                        .HasColumnType("boolean");

                    b.ToTable("System", "dbo");
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.Bowling", b =>
                {
                    b.HasBaseType("GamesResults.Models.DictionaryItem");

                    b.ToTable("Bowlings", "dbo");
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.City", b =>
                {
                    b.HasBaseType("GamesResults.Models.DictionaryItem");

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.HasIndex("DistrictId");

                    b.ToTable("Cities", "dbo");
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.Discipline", b =>
                {
                    b.HasBaseType("GamesResults.Models.DictionaryItem");

                    b.ToTable("Disciplines", "dbo");
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.District", b =>
                {
                    b.HasBaseType("GamesResults.Models.DictionaryItem");

                    b.ToTable("Districts", "dbo");
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.Oil", b =>
                {
                    b.HasBaseType("GamesResults.Models.DictionaryItem");

                    b.ToTable("Oils", "dbo");
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.Player", b =>
                {
                    b.HasBaseType("GamesResults.Models.DictionaryItem");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long?>("RankId")
                        .HasColumnType("bigint");

                    b.HasIndex("CityId");

                    b.HasIndex("RankId");

                    b.ToTable("Players", "dbo");
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.Rank", b =>
                {
                    b.HasBaseType("GamesResults.Models.DictionaryItem");

                    b.ToTable("Ranks", "dbo");
                });

            modelBuilder.Entity("GamesResults.Models.Page", b =>
                {
                    b.HasBaseType("GamesResults.Models.Component");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.ToTable("Pages", "dbo");
                });

            modelBuilder.Entity("ActionsRoles", b =>
                {
                    b.HasOne("GamesResults.Models.Action", null)
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("GamesResults.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamesResults.Models.Action", b =>
                {
                    b.HasOne("GamesResults.Models.ObjectType", "ObjectType")
                        .WithMany()
                        .HasForeignKey("ObjectTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ObjectType");
                });

            modelBuilder.Entity("GamesResults.Models.Log", b =>
                {
                    b.HasOne("GamesResults.Models.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamesResults.Models.Object", "Object")
                        .WithMany()
                        .HasForeignKey("ObjectId");

                    b.HasOne("GamesResults.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Action");

                    b.Navigation("Object");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GamesResults.Models.LogDetail", b =>
                {
                    b.HasOne("GamesResults.Models.Log", "Log")
                        .WithMany()
                        .HasForeignKey("LogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Log");
                });

            modelBuilder.Entity("GamesResults.Models.Object", b =>
                {
                    b.HasOne("GamesResults.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GamesResults.Models.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GamesResults.Models.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GamesResults.Models.Object", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GamesResults.Models.ObjectType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Author");

                    b.Navigation("Deleter");

                    b.Navigation("Editor");

                    b.Navigation("Parent");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("GamesResults.Models.ObjectProperty", b =>
                {
                    b.HasOne("GamesResults.Models.ObjectType", "ObjectType")
                        .WithMany("Properties")
                        .HasForeignKey("ObjectTypeId");

                    b.Navigation("ObjectType");
                });

            modelBuilder.Entity("GamesResults.Models.ObjectType", b =>
                {
                    b.HasOne("GamesResults.Models.Container", "RootContainer")
                        .WithMany()
                        .HasForeignKey("RootContainerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("RootContainer");
                });

            modelBuilder.Entity("ObjectPropertiesEditRoles", b =>
                {
                    b.HasOne("GamesResults.Models.ObjectProperty", null)
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("GamesResults.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UsersRoles", b =>
                {
                    b.HasOne("GamesResults.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamesResults.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.Event", b =>
                {
                    b.HasOne("GamesResults.Models.Object", null)
                        .WithOne()
                        .HasForeignKey("GamesResults.Models.Bowling.Event", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamesResults.Models.Bowling.Oil", "Oil")
                        .WithMany("Events")
                        .HasForeignKey("OilId");

                    b.Navigation("Oil");
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.EventTeamMember", b =>
                {
                    b.HasOne("GamesResults.Models.Bowling.Event", "Event")
                        .WithMany("EventTeamMembers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamesResults.Models.Object", null)
                        .WithOne()
                        .HasForeignKey("GamesResults.Models.Bowling.EventTeamMember", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamesResults.Models.Bowling.Player", "Player")
                        .WithMany("EventTeamMembers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamesResults.Models.Bowling.Team", "Team")
                        .WithMany("EventTeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.Participation", b =>
                {
                    b.HasOne("GamesResults.Models.Bowling.Bowling", "Bowling")
                        .WithMany("Participations")
                        .HasForeignKey("BowlingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamesResults.Models.Bowling.Event", "Event")
                        .WithMany("Participations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamesResults.Models.Object", null)
                        .WithOne()
                        .HasForeignKey("GamesResults.Models.Bowling.Participation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamesResults.Models.Bowling.Player", "Player")
                        .WithMany("IndividualParticipations")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GamesResults.Models.Bowling.Team", "Team")
                        .WithMany("TeamParticipations")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Bowling");

                    b.Navigation("Event");

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.Team", b =>
                {
                    b.HasOne("GamesResults.Models.Object", null)
                        .WithOne()
                        .HasForeignKey("GamesResults.Models.Bowling.Team", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.TeamMember", b =>
                {
                    b.HasOne("GamesResults.Models.Bowling.City", "City")
                        .WithMany("TeamMembers")
                        .HasForeignKey("CityId");

                    b.HasOne("GamesResults.Models.Object", null)
                        .WithOne()
                        .HasForeignKey("GamesResults.Models.Bowling.TeamMember", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamesResults.Models.Bowling.Player", "Player")
                        .WithMany("TeamMembers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamesResults.Models.Bowling.Rank", "Rank")
                        .WithMany("TeamMembers")
                        .HasForeignKey("RankId");

                    b.HasOne("GamesResults.Models.Bowling.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Player");

                    b.Navigation("Rank");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("GamesResults.Models.Container", b =>
                {
                    b.HasOne("GamesResults.Models.Object", null)
                        .WithOne()
                        .HasForeignKey("GamesResults.Models.Container", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamesResults.Models.DictionaryItem", b =>
                {
                    b.HasOne("GamesResults.Models.DictionaryType", "DictionaryType")
                        .WithMany()
                        .HasForeignKey("DictionaryTypeId");

                    b.HasOne("GamesResults.Models.Object", null)
                        .WithOne()
                        .HasForeignKey("GamesResults.Models.DictionaryItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DictionaryType");
                });

            modelBuilder.Entity("GamesResults.Models.Component", b =>
                {
                    b.HasOne("GamesResults.Models.Container", null)
                        .WithOne()
                        .HasForeignKey("GamesResults.Models.Component", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamesResults.Models.Action", "LoadAction")
                        .WithMany()
                        .HasForeignKey("LoadActionId");

                    b.Navigation("LoadAction");
                });

            modelBuilder.Entity("GamesResults.Models.DictionaryType", b =>
                {
                    b.HasOne("GamesResults.Models.Container", null)
                        .WithOne()
                        .HasForeignKey("GamesResults.Models.DictionaryType", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamesResults.Models.System", b =>
                {
                    b.HasOne("GamesResults.Models.Container", null)
                        .WithOne()
                        .HasForeignKey("GamesResults.Models.System", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.Bowling", b =>
                {
                    b.HasOne("GamesResults.Models.DictionaryItem", null)
                        .WithOne()
                        .HasForeignKey("GamesResults.Models.Bowling.Bowling", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.City", b =>
                {
                    b.HasOne("GamesResults.Models.Bowling.District", "District")
                        .WithMany("Cities")
                        .HasForeignKey("DistrictId");

                    b.HasOne("GamesResults.Models.DictionaryItem", null)
                        .WithOne()
                        .HasForeignKey("GamesResults.Models.Bowling.City", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.Discipline", b =>
                {
                    b.HasOne("GamesResults.Models.DictionaryItem", null)
                        .WithOne()
                        .HasForeignKey("GamesResults.Models.Bowling.Discipline", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.District", b =>
                {
                    b.HasOne("GamesResults.Models.DictionaryItem", null)
                        .WithOne()
                        .HasForeignKey("GamesResults.Models.Bowling.District", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.Oil", b =>
                {
                    b.HasOne("GamesResults.Models.DictionaryItem", null)
                        .WithOne()
                        .HasForeignKey("GamesResults.Models.Bowling.Oil", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.Player", b =>
                {
                    b.HasOne("GamesResults.Models.Bowling.City", "City")
                        .WithMany("Players")
                        .HasForeignKey("CityId");

                    b.HasOne("GamesResults.Models.DictionaryItem", null)
                        .WithOne()
                        .HasForeignKey("GamesResults.Models.Bowling.Player", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamesResults.Models.Bowling.Rank", "Rank")
                        .WithMany("Players")
                        .HasForeignKey("RankId");

                    b.Navigation("City");

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.Rank", b =>
                {
                    b.HasOne("GamesResults.Models.DictionaryItem", null)
                        .WithOne()
                        .HasForeignKey("GamesResults.Models.Bowling.Rank", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamesResults.Models.Page", b =>
                {
                    b.HasOne("GamesResults.Models.Component", null)
                        .WithOne()
                        .HasForeignKey("GamesResults.Models.Page", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamesResults.Models.ObjectType", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.Event", b =>
                {
                    b.Navigation("EventTeamMembers");

                    b.Navigation("Participations");
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.Team", b =>
                {
                    b.Navigation("EventTeamMembers");

                    b.Navigation("TeamMembers");

                    b.Navigation("TeamParticipations");
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.Bowling", b =>
                {
                    b.Navigation("Participations");
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.City", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.District", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.Oil", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.Player", b =>
                {
                    b.Navigation("EventTeamMembers");

                    b.Navigation("IndividualParticipations");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("GamesResults.Models.Bowling.Rank", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
